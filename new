
#you will be needing 4 terminals in the same folder 

have the two servers running in different terminals 

mlflow server --backend-store-uri sqlite:///backend.db --default-artifact-root artifacts_local

prefect orion start

For this project, we use a local Prefect Orion server. Open a separate terminal and start the Prefect Orion server with the prefect orion start CLI command: 

check that both servers are running 
# orion
http://127.0.0.1:4200

# mlflow
http://127.0.0.1:5000



docs on prefect deployment
https://docs.prefect.io/tutorials/deployments/



# note that the pipenv is built untop of a conda environment base 
#you need to install prefect in a conda environment using pip install prefect, 


steps to deploy the prefect flow


prefect deployment build is the Prefect CLI command that enables you to prepare the settings for a deployment
## prefect deployment build ./paris_flow_local.py:main -n paris-housing-deployment -t Paristest
    
# /paris_flow_local.py.py:main
    ->> ##specifies the location of the flow script file and the name of the entrypoint flow function, separated by a colon., note that the entry point is the function that is below the @flow in the paris_flow_local.py file
# -n paris-housing-deployment 
    -->is an option to specify a name for the deployment.
# -t Paristest
    -->specifies a tag for the deployment. Tags enable filtering deployment flow runs in the UI and on work queues.
    
# parameters: {'name':'Paris'}
Open the paris_flow_local.py-deployment.yaml file and add the parameter 



#  prefect config set PREFECT_API_URL=http://127.0.0.1:4200/api
Note the message to set PREFECT_API_URL so that you're coordinating flows with this API instance.
Open another terminal and run this command to set the API URL:

# these file should be present in the folder 
The flow code in paris_flow_local.py.py (mandatory)
The manifest paris_flow_local.py-manifest.json (this is not mandatory)
The deployment settings paris_flow_local.py-deployment.yaml (mandatory)

# prefect deployment apply main-deployment.yaml
Now use the prefect deployment apply command to create the deployment on the Prefect Orion server, specifying the name of the main-deployment.yaml file.

# prefect deployment ls
To demonstrate that your deployment exists, list all of the current deployments:

#  prefect deployment inspect main/paris-housing-deployment
to display details for a specific deployment.


# ------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Work queues and agent<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Note that you can't Run the deployment from the UI yet. As mentioned at the beginning of this tutorial, you still need two more items to run orchestrated deployments: a work queue and an agent.

# prefect agent start -t Paristest
run the prefect agent start command, passing a -t test option that creates a work queue for test tags. Remember, we configured this same tag on the deployment at an earlier step.

you can check the ui in the url 
    go to deployments, 
        you should see -> paris-housing-deployment there,
            clock on it and click on the icon below where you see shedule
                you can shedule the frequency you want the job to run either in cron or in utc 
                click on save 



Now that you've created the deployment, agent, and associated work queue, you can interact with it in multiple ways. For example, you can use the Prefect CLI to run a local flow run for the deployment

# prefect deployment run main/paris-housing-deployment

the flow will activate and you will see it itn the ui

